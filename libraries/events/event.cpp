
//=============================================================================================================
// INCLUDES
//=============================================================================================================

#include "event.h"
#include "eventgroup.h"

//=============================================================================================================
// QT INCLUDES
//=============================================================================================================

//=============================================================================================================
// EIGEN INCLUDES
//=============================================================================================================

//=============================================================================================================
// USED NAMESPACES
//=============================================================================================================

//=============================================================================================================
// INIT STATIC MEMBERS
//=============================================================================================================

//=============================================================================================================
// DEFINE MEMBER METHODS
//=============================================================================================================

EVENTSLIB::Event::Event()
:EVENTSLIB::Event(0,0,0)
{ }

EVENTSLIB::Event::Event(const idNum idRHS,const  int sampleRHS, const idNum groupIdRHS)
: id(idRHS)
, groupId(groupIdRHS)
, sample(sampleRHS)
{ }

EVENTSLIB::Event::Event(const EVENTSINTERNAL::Event& e)
: Event(e.getId(), e.getSample(), e.getGroup())
{ }

//=============================================================================================================

EVENTSINTERNAL::Event::Event(idNum id, int iSample, idNum groupId)
: m_iId(id)
, m_iGroup(groupId)
, m_iSample(iSample)
, m_description("")
, m_aux(0)
{ }

//=============================================================================================================

int EVENTSINTERNAL::Event::getSample() const
{
    return m_iSample;
}

//=============================================================================================================

void EVENTSINTERNAL::Event::setSample(int iSample)
{
    m_iSample = iSample;
}


//=============================================================================================================

idNum EVENTSINTERNAL::Event::getGroup() const
{
    return m_iGroup;
}

//=============================================================================================================

void EVENTSINTERNAL::Event::setGroup(idNum iGroup)
{
    m_iGroup = iGroup;
}

//=============================================================================================================

idNum EVENTSINTERNAL::Event::getId() const
{
    return m_iId;
}

//=============================================================================================================
bool EVENTSINTERNAL::Event::operator<(const Event& rhs) const
{
    bool isLessThan;
    if (m_iSample == rhs.getSample()){
        isLessThan = m_iId < rhs.getId();
    } else {
        isLessThan = m_iSample < rhs.getSample();
    }
    return isLessThan;
}
