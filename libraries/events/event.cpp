
//=============================================================================================================
// INCLUDES
//=============================================================================================================

#include "event.h"
#include "eventgroup.h"

//=============================================================================================================
// QT INCLUDES
//=============================================================================================================

//=============================================================================================================
// EIGEN INCLUDES
//=============================================================================================================

//=============================================================================================================
// USED NAMESPACES
//=============================================================================================================

//=============================================================================================================
// INIT STATIC MEMBERS
//=============================================================================================================

//=============================================================================================================
// DEFINE MEMBER METHODS
//=============================================================================================================

EVENTSLIB::Event::Event()
:EVENTSLIB::Event(0,0,0)
{ }

//=============================================================================================================

EVENTSLIB::Event::Event(const idNum id,const  int sample, const idNum groupId)
: id(id)
, sample(sample)
, groupId(groupId)
{ }

//=============================================================================================================

EVENTSLIB::Event::Event(const EVENTSINTERNAL::EventINT& e)
: Event(e.getId(), e.getSample(), e.getGroupId())
{ }

//=============================================================================================================

EVENTSINTERNAL::EventINT::EventINT(idNum id)
: EventINT(id, 0, 0)
{ }

//=============================================================================================================

EVENTSINTERNAL::EventINT::EventINT(idNum id, int iSample, idNum groupId)
: m_iId(id)
, m_iSample(iSample)
, m_iGroup(groupId)
, m_sDescription("")
{ }

//=============================================================================================================

EVENTSINTERNAL::EventINT::EventINT(const EventINT& rhs)
: m_iId(rhs.getId())
, m_iSample(rhs.getSample())
, m_iGroup(rhs.getGroupId())
, m_sDescription(getDescription())
{ }

//=============================================================================================================

EVENTSINTERNAL::EventINT::EventINT(EventINT&& other)
: m_iId(other.getId())
, m_iSample(other.getSample())
, m_iGroup(other.getGroupId())
, m_sDescription(getDescription())
{ }

//=============================================================================================================

int EVENTSINTERNAL::EventINT::getSample() const
{
    return m_iSample;
}

//=============================================================================================================

void EVENTSINTERNAL::EventINT::setSample(int iSample)
{
    m_iSample = iSample;
}

//=============================================================================================================

idNum EVENTSINTERNAL::EventINT::getGroupId() const
{
    return m_iGroup;
}

//=============================================================================================================

void EVENTSINTERNAL::EventINT::setGroupId(idNum iGroup)
{
    m_iGroup = iGroup;
}

//=============================================================================================================

idNum EVENTSINTERNAL::EventINT::getId() const
{
    return m_iId;
}

//=============================================================================================================

std::string EVENTSINTERNAL::EventINT::getDescription() const
{
    return m_sDescription;
}

//=============================================================================================================

bool EVENTSINTERNAL::EventINT::operator<(const EventINT& rhs) const
{
    return m_iSample < rhs.getSample();
}

//=============================================================================================================

bool EVENTSINTERNAL::EventINT::operator==(const EventINT& rhs) const
{
    return (m_iId == rhs.getId());
}

EVENTSINTERNAL::EventINT EVENTSINTERNAL::EventINT::operator=(const EventINT& rhs)
{
    return EVENTSINTERNAL::EventINT(rhs);
}
