
//=============================================================================================================
// INCLUDES
//=============================================================================================================

#include "event.h"
#include "eventgroup.h"

//=============================================================================================================
// QT INCLUDES
//=============================================================================================================

//=============================================================================================================
// EIGEN INCLUDES
//=============================================================================================================

//=============================================================================================================
// USED NAMESPACES
//=============================================================================================================

//=============================================================================================================
// INIT STATIC MEMBERS
//=============================================================================================================

int EVENTSINTERNAL::Event::eventIdCounter(0);

//=============================================================================================================
// DEFINE MEMBER METHODS
//=============================================================================================================

EVENTSLIB::Event::Event()
:EVENTSLIB::Event(0,0,0)
{ }

EVENTSLIB::Event::Event(const uint i,const  int s, const uint gid)
: id(i)
, groupId(gid)
, sample(s)
{ }

EVENTSLIB::Event::Event(const EVENTSINTERNAL::Event& e)
: Event(e.getId(), e.getSample(), e.getGroup())
{ }

//=============================================================================================================

EVENTSINTERNAL::Event::Event(int iSample, const EventGroup& group)
: m_iGroup(group.getId())
, m_iSample(iSample)
{
    m_iId = eventIdCounter++;
}

//=============================================================================================================

int EVENTSINTERNAL::Event::getSample() const
{
    return m_iSample;
}

//=============================================================================================================

void EVENTSINTERNAL::Event::setSample(int iSample)
{
    m_iSample = iSample;
}


//=============================================================================================================

uint EVENTSINTERNAL::Event::getGroup() const
{
    return m_iGroup;
}

//=============================================================================================================

void EVENTSINTERNAL::Event::setGroup(uint iGroup)
{
    m_iGroup = iGroup;
}

//=============================================================================================================

uint EVENTSINTERNAL::Event::getId() const
{
    return m_iId;
}

//=============================================================================================================
bool EVENTSINTERNAL::Event::operator<(const Event& rhs) const
{
    bool isLessThan;
    if (m_iSample == rhs.getSample()){
        isLessThan = m_iId < rhs.getId();
    } else {
        isLessThan = m_iSample < rhs.getSample();
    }
    return isLessThan;
}
